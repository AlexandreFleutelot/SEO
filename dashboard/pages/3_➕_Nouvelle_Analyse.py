# -*- coding: utf-8 -*-
"""
3_‚ûï_Nouvelle_Analyse.py

Page pour lancer de nouvelles analyses SEO directement depuis le dashboard.
"""

import streamlit as st
import sys
from pathlib import Path
import subprocess
import time
import os
from datetime import datetime
import validators

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent.parent))

from dashboard.utils.data_loader import SEODataLoader

st.set_page_config(page_title="Nouvelle Analyse", page_icon="‚ûï", layout="wide")

# CSS personnalis√©
st.markdown("""
<style>
    .analysis-form {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
    }
    
    .status-running {
        background-color: #dbeafe;
        color: #1e40af;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #3b82f6;
    }
    
    .status-success {
        background-color: #dcfce7;
        color: #166534;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #22c55e;
    }
    
    .status-error {
        background-color: #fee2e2;
        color: #991b1b;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #ef4444;
    }
    
    .quick-urls {
        background: #f8fafc;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e2e8f0;
    }
</style>
""", unsafe_allow_html=True)

st.title("‚ûï Nouvelle Analyse SEO")

# Section principale - Formulaire d'analyse avec design am√©lior√©
st.markdown('''
<div style="
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 15px;
    color: white;
    margin: 1rem 0;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.2);
">
    <h2 style="margin-bottom: 1.5rem; text-align: center;">üöÄ Lancer une Nouvelle Analyse SEO</h2>
    <p style="text-align: center; opacity: 0.9; margin-bottom: 2rem;">Analysez n'importe quelle page web en profondeur avec notre outil SEO avanc√©</p>
</div>
''', unsafe_allow_html=True)

with st.form("new_analysis_form"):
    # URL √† analyser
    url_input = st.text_input(
        "üåê URL √† analyser",
        placeholder="https://example.com/page-to-analyze",
        help="Entrez l'URL compl√®te de la page √† analyser"
    )
    
    # Options avanc√©es
    col1, col2 = st.columns(2)
    
    with col1:
        enable_llm = st.checkbox(
            "üß† Analyse IA avanc√©e", 
            value=True,
            help="Active l'analyse LLM pour les m√©triques E-A-T et optimisation GEO"
        )
        
        pagespeed_analysis = st.checkbox(
            "‚ö° Analyse Performance", 
            value=True,
            help="Active l'analyse des Core Web Vitals via Google PageSpeed"
        )
    
    with col2:
        enhanced_analysis = st.checkbox(
            "üî¨ Analyses am√©lior√©es", 
            value=True,
            help="Active les analyses de naturalit√©, SSR, et donn√©es originales"
        )
        
        auto_refresh = st.checkbox(
            "üîÑ Rafra√Æchir automatiquement", 
            value=True,
            help="Rafra√Æchit automatiquement la page apr√®s analyse"
        )
    
    # Bouton de soumission
    submit_button = st.form_submit_button(
        "üöÄ Lancer l'Analyse",
        use_container_width=True,
        type="primary"
    )

st.markdown('</div>', unsafe_allow_html=True)


# Traitement du formulaire
if submit_button:
    if not url_input:
        st.error("‚ùå Veuillez entrer une URL √† analyser")
    elif not validators.url(url_input):
        st.error("‚ùå L'URL entr√©e n'est pas valide. V√©rifiez le format (https://example.com)")
    else:
        # Lancer l'analyse
        st.success(f"‚úÖ Analyse lanc√©e pour: {url_input}")
        
        # Barre de progression
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # Pr√©parer la commande
            project_root = Path(__file__).parent.parent.parent
            
            # Pr√©parer les variables d'environnement
            env = os.environ.copy()
            env['ANALYSIS_URL'] = url_input
            env['ENABLE_LLM_ANALYSIS'] = 'true' if enable_llm else 'false'
            env['ENABLE_ENHANCED_ANALYSIS'] = 'true' if enhanced_analysis else 'false'
            
            # Mettre √† jour la barre de progression
            progress_bar.progress(10)
            status_text.markdown('<div class="status-running">üîÑ Initialisation de l\'analyse...</div>', unsafe_allow_html=True)
            
            # Lancer l'analyse
            cmd = [
                "uv", "run", "python", "-m", "src.page_analyzer"
            ]
            
            progress_bar.progress(20)
            status_text.markdown('<div class="status-running">üìÑ R√©cup√©ration du contenu de la page...</div>', unsafe_allow_html=True)
            
            # Ex√©cuter la commande d'analyse
            process = subprocess.run(
                cmd,
                cwd=str(project_root),
                capture_output=True,
                text=True,
                timeout=300,  # 5 minutes timeout
                env=env
            )
            
            progress_bar.progress(50)
            status_text.markdown('<div class="status-running">üîç Analyse du contenu et de la structure...</div>', unsafe_allow_html=True)
            
            time.sleep(1)  # Simulation du traitement
            progress_bar.progress(70)
            
            if enable_llm:
                status_text.markdown('<div class="status-running">üß† Analyse IA en cours...</div>', unsafe_allow_html=True)
                time.sleep(2)
                progress_bar.progress(85)
            
            if pagespeed_analysis:
                status_text.markdown('<div class="status-running">‚ö° Analyse des performances...</div>', unsafe_allow_html=True)
                time.sleep(1)
                progress_bar.progress(95)
            
            status_text.markdown('<div class="status-running">üìä G√©n√©ration des scores et recommandations...</div>', unsafe_allow_html=True)
            progress_bar.progress(100)
            
            if process.returncode == 0:
                status_text.markdown('<div class="status-success">‚úÖ Analyse termin√©e avec succ√®s!</div>', unsafe_allow_html=True)
                
                # Afficher les r√©sultats
                st.success("üéâ Analyse SEO termin√©e!")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("üåê URL analys√©e", url_input.split('//')[-1][:30] + "..." if len(url_input) > 30 else url_input)
                
                with col2:
                    st.metric("üìÖ Date d'analyse", datetime.now().strftime("%d/%m/%Y %H:%M"))
                
                with col3:
                    if process.stdout:
                        # Essayer d'extraire le score global des logs
                        if "Score global" in process.stdout:
                            score_line = [line for line in process.stdout.split('\n') if 'Score global' in line]
                            if score_line:
                                score = score_line[0].split(':')[-1].strip()
                                st.metric("üìä Score Global", score)
                        else:
                            st.metric("‚úÖ Status", "Termin√©")
                
                # Options post-analyse
                st.divider()
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button("üìä Voir dans le Dashboard", use_container_width=True, type="primary"):
                        # Vider tous les caches avant de changer de page
                        st.cache_data.clear()
                        st.switch_page("dashboard/app.py")
                
                with col2:
                    if st.button("üîç Analyse D√©taill√©e", use_container_width=True):
                        # Vider tous les caches avant de changer de page
                        st.cache_data.clear()
                        st.switch_page("pages/1_üîç_Analyse_D√©taill√©e.py")
                
                with col3:
                    if st.button("‚ûï Nouvelle Analyse", use_container_width=True):
                        # Vider le cache et rafra√Æchir
                        st.cache_data.clear()
                        st.rerun()
                
                # Logs d√©taill√©s (repliable)
                if process.stdout or process.stderr:
                    with st.expander("üìã Logs d√©taill√©s de l'analyse"):
                        if process.stdout:
                            st.text("STDOUT:")
                            st.code(process.stdout, language="text")
                        if process.stderr:
                            st.text("STDERR:")
                            st.code(process.stderr, language="text")
                
                # Auto-refresh si activ√©
                if auto_refresh:
                    st.cache_data.clear()  # Vider le cache avant de rafra√Æchir
                    time.sleep(3)
                    st.rerun()
                    
            else:
                status_text.markdown('<div class="status-error">‚ùå Erreur lors de l\'analyse</div>', unsafe_allow_html=True)
                st.error(f"‚ùå L'analyse a √©chou√© avec le code d'erreur: {process.returncode}")
                
                if process.stderr:
                    st.error(f"Erreur: {process.stderr}")
                
                with st.expander("üîç D√©tails de l'erreur"):
                    st.code(process.stderr if process.stderr else "Aucun d√©tail disponible", language="text")
                
        except subprocess.TimeoutExpired:
            status_text.markdown('<div class="status-error">‚è±Ô∏è Timeout - L\'analyse a pris trop de temps</div>', unsafe_allow_html=True)
            st.error("‚è±Ô∏è L'analyse a d√©pass√© le d√©lai maximum (5 minutes)")
            st.info("üí° Essayez avec une page plus simple ou v√©rifiez votre connexion internet")
            
        except Exception as e:
            status_text.markdown('<div class="status-error">‚ùå Erreur inattendue</div>', unsafe_allow_html=True)
            st.error(f"‚ùå Erreur inattendue: {str(e)}")
            
            with st.expander("üîç D√©tails techniques"):
                st.exception(e)

# Historique des analyses r√©centes
st.divider()
st.header("üìà Analyses R√©centes")

# Charger les rapports existants avec d√©tection des changements
try:
    loader = SEODataLoader()
    reports = loader.get_available_reports()
    
    if reports:
        # Afficher les 5 derni√®res analyses
        recent_reports = sorted(reports, key=lambda x: x['created_date'], reverse=True)[:5]
        
        for i, report in enumerate(recent_reports):
            with st.container():
                col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                
                with col1:
                    st.write(f"**{report['domain']}**")
                    st.caption(report['url'][:60] + "..." if len(report['url']) > 60 else report['url'])
                
                with col2:
                    st.write(f"üìÖ {report['created_date'].strftime('%d/%m/%Y %H:%M')}")
                
                with col3:
                    if report['has_scores']:
                        score_report = loader.load_score_report(report['id'])
                        if score_report:
                            global_score = score_report.get('global_analysis', {}).get('global_score', 0)
                            st.metric("Score", f"{global_score:.1f}/100")
                        else:
                            st.write("Score: N/A")
                    else:
                        st.write("‚è≥ En cours...")
                
                with col4:
                    if st.button("üëÄ", key=f"view_{i}", help="Voir l'analyse"):
                        # Rediriger vers l'analyse d√©taill√©e
                        st.session_state.selected_report_id = report['id']
                        st.switch_page("pages/1_üîç_Analyse_D√©taill√©e.py")
                
                if i < len(recent_reports) - 1:
                    st.divider()
    else:
        st.info("üìù Aucune analyse disponible. Lancez votre premi√®re analyse ci-dessus!")
        
except Exception as e:
    st.error(f"‚ùå Erreur lors du chargement de l'historique: {str(e)}")

# Footer
st.divider()
st.markdown("""
<div style="text-align: center; color: #64748b; padding: 1rem;">
    üí° <strong>Astuce:</strong> Les analyses peuvent prendre 2-5 minutes selon la complexit√© de la page et les options activ√©es.
    <br>
    üîÑ Les r√©sultats sont automatiquement sauvegard√©s et disponibles dans les autres onglets du dashboard.
</div>
""", unsafe_allow_html=True)